version: "3.9"
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]

  redis:
    image: redis:7
    ports: ["6379:6379"]

  minio:
    image: minio/minio:latest
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports: ["9000:9000", "9001:9001"]
    volumes: ["minio:/data"]

  opensearch:
    image: opensearchproject/opensearch:2.15.0
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports: ["${OPENSEARCH_PORT:-9200}:9200"]

  redpanda:
    image: redpandadata/redpanda:v24.2.12
    command:
      [
        "redpanda",
        "start",
        "--overprovisioned",
        "--smp",
        "1",
        "--memory",
        "1G",
        "--reserve-memory",
        "0M",
        "--node-id",
        "0",
        "--check=false"
      ]
    ports:
      - "9092:9092"
      - "9644:9644"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file: .env
    command: >
      bash -lc "
      python manage.py makemigrations core &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      python manage.py runserver 0.0.0.0:${BACKEND_PORT:-8000}
      "
    depends_on:
      - postgres
      - redis
      - minio
      - opensearch
    ports:
      - "${BACKEND_PORT:-8000}:${BACKEND_PORT:-8000}"
    volumes:
      - ./backend:/app
      - ./metadata:/app/metadata:ro
      - ./pipelines:/app/pipelines:ro

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - BACKEND_URL=http://localhost:${BACKEND_PORT:-8000}
    ports:
      - "${FRONTEND_PORT:-5173}:${FRONTEND_PORT:-5173}"
    # single --host flag; bind to 0.0.0.0
    command: ["npm","run","dev","--","--host","0.0.0.0"]
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules   # keep node_modules inside the container

  prefect:
    image: prefecthq/prefect:2-latest
    command: ["prefect", "orion", "start"]
    ports: ["${PREFECT_PORT:-4200}:4200"]

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.0
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root s3://mlflow
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    ports: ["${MLFLOW_PORT:-5000}:5000"]
    depends_on: [minio]

  grafana:
    image: grafana/grafana:11.2.0
    ports: ["${GRAFANA_PORT:-3000}:3000"]

  prometheus:
    image: prom/prometheus:v2.55.0
    volumes: ["./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro"]
    ports: ["${PROMETHEUS_PORT:-9090}:9090"]

  loki:
    image: grafana/loki:3.1.1
    volumes: ["./observability/loki-config.yml:/etc/loki/local-config.yaml:ro"]
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports: ["3100:3100"]

volumes:
  pgdata: {}
  minio: {}
